<e1>aa</e1>
<e2>bb</e2>
<e3>cc</e3>
</e>
</x>'
xmlToDataFrame(getNodeSet(doc, "//x/*[self::a or self::b]"))
tt <-
'<x>
<a>text</a>
<b>bbb</b>
<c bar="me" />
<d>a phrase</d>
<e>
<e1>aa</e1>
<e2>bb</e2>
<e3>cc</e3>
</e>
</x>'
doc <- xmlInternalTreeParse(tt)
xmlToDataFrame(getNodeSet(doc, "//x/*[self::a or self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[self::a or self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[self::a and self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[self::a or self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[self::a][self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[self::a][self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[a][self::b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[a][b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[a][b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[a/][b]"))
xmlToDataFrame(getNodeSet(doc, "//x/[a/][b/]"))
xmlToDataFrame(getNodeSet(doc, "//x/[a/text()][b/text()]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[a/text()][b/text()]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[a/text()]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[a]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[(a)]"))
xmlToDataFrame(getNodeSet(doc, "//x[(a)]"))
tt <-
'<x>
<a>text</a>
<b>bbb</b>
<c bar="me" />
<d>a phrase</d>
<e>
<e1>aa1</e1>
<e2>bb1</e2>
<e3>cc1</e3>
</e>
<e>
<e1>aa2</e1>
<e2>bb2</e2>
<e3>cc2</e3>
</e>
</x>'
doc <- xmlInternalTreeParse(tt)
xmlToDataFrame(getNodeSet(doc, "//x[(a)]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[self::e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[self::e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1 or e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1]*[self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 and self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1][e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e")) # select all children of e node
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e")) # select all children of e node
xmlToDataFrame(getNodeSet(doc, c("//x/e/")))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, c("//x/e")))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, c("//x/e/e1","//x/e/e2")))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/e1"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1 and e2"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1 and e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1 | e2]"))  # select only e1 and e2
e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e")) # select all children of e node
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))  # select e1 and e2 vertically
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))  # select only e1 and e2
xml.parsed = xmlInternalTreeParse(xml)
xmlToDataFrame(getNodeSet(xml.parsed, "/a/b/*[self::c or self::d or self::e]"))
source.url <- "http://www.kma.go.kr/weather/forecast/mid-term-rss3.jsp?stnId=108"
xml.text = getURIAsynchronous(source.url)
xml.parsed = xmlInternalTreeParse(xml.text)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
myframe
head(myframe)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city"), homogeneous=T)
head(myframe)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
head(myframe)
getNodeSet(xml.parsed, "//body/location/city")
myframe
xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/data"), homogeneous=T)
xmlToDataFrame(getNodeSet(xml.parsed, "//body/location | //body/location/data"), homogeneous=T)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location | //body/location/data"), homogeneous=T))
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location | //body/location/data"), homogeneous=T), n=1)
?head
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city | //body/location/data"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city | //body/location/data"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city | //body/location/province"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province | //body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province & //body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province  //body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/[(city) or (province)]"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/*"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location")), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T), n=1)
?xmlToDataFrame
library(xkcd)
install.packages("xkcd")
if (?library(xkcd)) {
install.packages("xkcd")
}
if (!require(xkcd)) {
install.packages("xkcd")
}
vignette("xkcd-intro")
library(ggplot2)
p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Fuel Efficiency of 32 Cars") +
xlab("Weight (x1000 lb)") + ylab("Miles per Gallon") +
theme(text=element_text(size=16, family="xkcd"))
ggsave("xkcd_ggplot.pdf", plot=p,  width=4, height=4)
## needed for Windows:
##   Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
embed_fonts("xkcd_ggplot.pdf")
embed_fonts("xkcd_ggplot.pdf")
ggsave("xkcd_ggplot.pdf", plot=p,  width=4, height=4)
library(ggplot2)
p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Fuel Efficiency of 32 Cars") +
xlab("Weight (x1000 lb)") + ylab("Miles per Gallon") +
theme(text=element_text(size=16, family="xkcd"))
ggsave("xkcd_ggplot.pdf", plot=p,  width=4, height=4)
## needed for Windows:
##   Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
embed_fonts("xkcd_ggplot.pdf")
set.seed(20121108)
x = seq(1, 10, 0.1)
r = function() runif(length(x), -0.05, 0.05)
y1 = sin(x) + r()
y2 = cos(x) + r()
# draw the lines and texts
par(mar = c(2, 0.1, 0.1, 0.1))
plot.new()
plot.window(range(x), c(-1.5, 1))
grid()
matplot(x, cbind(y1, y2, y2), type = "l", lty = 1, col = c("black",
"white", "red"), lwd = c(3, 15, 3), add = TRUE)
axis(1, c(2, 5, 6, 9), c("YARD", "STEPS", "DOOR", "INSIDE"), lwd = 0,
line = -1)
text(7, -1.25, "A SIN AND COS CURVE", cex = 1.5)
lines(x, -1.5 + runif(length(x), -0.005, 0.005), xpd = NA, lwd = 2)
plot(iris)
data.source <- "http://sealevel.colorado.edu/files/2014_rel1/sl_ns_global.txt"
getURL
getUrl
getURL
library(RCulr)
library(RCurl)
getURL()
data.source.url <- "http://sealevel.colorado.edu/files/2014_rel1/sl_ns_global.txt"
getURL(data.source.url)
data.source.raw <- getURL(data.source.url)
read.csv(data.source.raw, sep="\t")
read.csv(data.source.raw, sep="\t", header=T)
data.source <- read.csv(data.source.raw, sep="\t", header=T)
data.source <- read.csv(data.source.url, sep="\t", header=T)
data.source
colnames(data.source)
data.source.url <- "http://sealevel.colorado.edu/files/2014_rel1/sl_ns_global.txt"
data.source <- read.csv(data.source.url, sep="\t", header=T)
data.source
NCOL(data.source)
data.source <- read.table(data.source.url, sep="\t", header=T)
data.source
NCOL(data.source)
data.source <- read.table(data.source.url, header=T)
NCOL(data.source)
data.source
NCOL(data.source)
colnames(data.source)
as.Date(data.source$year)
data.source$year
data.source <- read.table(data.source.url, header=T, colClasses=c("characters", "characters"))
data.source <- read.table(data.source.url, header=T, colClasses=c("character", "character"))
NCOL(data.source)
colnames(data.source)
as.Date(data.source$year)
data.source$year
as.POSIXct(data.source$year)
as.POSIXct(data.source$year)
data.source$year
138 * 0.5
9813 * 0.6
9813 * 0.5
24*24*365
24*365
24*365*6
24*365
48*365
24*365
24*366
24*365
24*24*365
60*24*24*365
60*24*24*365 / 9999
60*24*24*365 / 1200
60*24*24*365 / 1500
365 / 10000
9450 * 0.0365
install.packages("konlp")
install.packages("KoNLP")
library(KoNLP)
tau
??tau
?tau
????tau
????
t
????a
?a
??a
???a
????a
????CLIPS
????linear
????please
????please
abs?
;
abs????
?a?
;
?a?
;
????a
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
library(Rserve)
install.packages("Rserve")
library(Rserve)
c = RSconnect(host = "localhost", port 6311)
c = RSconnect(host = "192.168.5.181", port = 9797)
c = RSconnect(host = "192.168.5.181", port = 9797)
library(Rserve)
c = RSconnect(host = "192.168.5.181", port = 9797)
library(Rserve)
apropos("RSc")
apropos("^RSc")
apropos("^RS")
install.package("Rclient")
install.package("RSclient")
install.packages("RSclient")
library(RSclient)
c = RS.connect(host = "192.168.5.181", port = 9797)
RS.connect
c = RS.connect(host = "192.168.5.181", port = 9797)
rsc = RS.connect(host = "192.168.5.181", port = 9797)
rsc = RS.connect(host="192.168.5.181", port=9791)
rsc = RS.connect(host="192.168.5.181", port=9797)
rsc = RS.connect(host="192.168.5.181", port=9797)
RS.login(rsc, "root", "dss1234~!")
rsc = RS.connect(host="192.168.5.181", port=9797)
rsc = RS.connect()
rsc = RS.connect(host="192.168.5.181", port="9797")
rsc = RS.connect(host="192.168.5.181", port=9797, tls=T)
rsc = RS.connect(host="192.168.5.181", port=9797, tls=F)
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
rsc = RS.connect(host="192.168.5.181")
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F, user="root", password="dss1234~!")
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
install.packages("Rook")
install.packages("party")
library("party")
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
print(iris_ctree)
plot(iris_ctree, type="simple")
install.packages("rattle")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("rpart.plot")
install.packages("partykit")
install.packages("RWeka")
install.packages("C50")
library(rattle) # GUI for building trees and fancy tree plot
library(rpart) # Popular decision tree algorithm
library(rpart.plot) # Enhanced tree plots
library(party) # Alternative decision tree algorithm
library(partykit) # Convert rpart object to BinaryTree
library(RWeka) # Weka decision tree J48.
library(C50) # Original C5.0 implementation.
install.packages("rJava")
library(C50) # Original C5.0 implementation.
library(RWeka) # Weka decision tree J48.
install.packages("C50")
library(help=rattle)
kyphosis
library(rpart)
fit <- rpart(Kyphosis ~ Age + Number + Start, data=kyphosis)
printcp(fit)
library(tree)
install.packages("rpart")
install.packages("tree")
library(tree)
summary(tree(Kyphosis ~ Age + Number + Start, data=kyphosis))
xmat <- xpred.rpart(fit)
xmat
xerr <- (xmat - car.test.frame$Kyphosis)^2
xerr <- (xmat - kyphosis$Kyphosis)^2
xmat
kyphosis$Kyphosis
xerr <- (xmat - kyphosis$Kyphosis)^2
apply(xerr, 2, sum)/var(car.test.frame$Mileage)
apply(xerr, 2, sum)/var(kyphosis$Kyphosis)
library(cvTools)
install.packages("cvTools")
library(cvTools)
cvFit(rpart(formula=Species~., data=iris))
cvFit(rpart(formula=Species~., data=iris))
rpart(formula=Species~., data=iris)
cvFit(rpart(formula=Species~., data=iris))
data(iris)
tc <- trainControl("cv",10)
rpart.grid <- expand.grid(.cp=0.2)
(train.rpart <- train(Species ~., data=iris, method="rpart",trControl=tc,tuneGrid=rpart.grid))
train
library(caret)
install.packages("caret")
library(caret)
library(caret)
(train.rpart <- train(Species ~., data=iris, method="rpart",trControl=tc,tuneGrid=rpart.grid))
tc <- trainControl("cv",10)
rpart.grid <- expand.grid(.cp=0.2)
(train.rpart <- train(Species ~., data=iris, method="rpart",trControl=tc,tuneGrid=rpart.grid))
library(rpart)
library(cvTools)
data(iris)
cvFit(rpart, formula=Species~., data=iris,
cost=function(y, yHat) (y != yHat) + 0, predictArgs=c(type='class'))
pred = predict(mod, type="class")
source("http://scg.sdsu.edu/wp-content/uploads/2013/09/dataprep.r")
source("./dataprep.r")
source("http://scg.sdsu.edu/wp-content/uploads/2013/09/dataprep.r")
setwd("AC:\Users\aiden.hong\Documents\workspace\code_snippets\R\decision_tree")
setwd("C:\Users\aiden.hong\Documents\workspace\code_snippets\R\decision_tree")
setwd('C:\Users\aiden.hong\Documents\workspace\code_snippets\R\decision_tree')
setwd('C:\\Users\aiden.hong\\Documents\\workspace\\code_snippets\\R\\decision_tree')
setwd("C:\\Users\aiden.hong\\Documents\\workspace\\code_snippets\\R\\decision_tree")
setwd("C:\\Users\\aiden.hong\\Documents\\workspace\\code_snippets\\R\\decision_tree")
source("./dataprep.r")
tree.1 <- rpart(form, data=data, control=rpart.control(minsplit=20, cp=0))
form <- as.formula(Class ~ .)
data(segmentationData)				# Get some data
data <- segmentationData[,-c(1,2)]
form <- as.formula(Class ~ .)
tree.1 <- rpart(form, data=data, control=rpart.control(minsplit=20, cp=0))
tree.1
plot(tree.1)          # Will make a mess of the plot
text(tree.1)
tree.2 <- rpart(form,data)			# A more reasonable tree
prp(tree.2)                                     # A fast plot
fancyRpartPlot(tree.2)				# A fancy plot from rattle
fancyRpartPlot(tree.1)
plot(tree.1)          # Will make a mess of the plot
text(tree.1)
fancyRpartPlot(tree.1)
printcp(tree.1)
plotcp(tree.1)
pfit <- prune(tree.1, cp=0.10) # from cptable
pfit <- prune(tree.1, cp=0.10) # from cptable
pfit <- prune(tree.1,cp=fit$cptable[which.min(tree.1$cptable[,"xerror"]),"CP"])
pfit <- prune(tree.1, cp=fit$cptable[which.min(tree.1$cptable[,"xerror"]),"CP"])
library(mlbench)
data(Sonar)
str(Sonar[, 1:10])
library(caret)
set.seed(998)
inTraining <- createDataPartition(Sonar$Class, p = 0.75, list = FALSE)
training <- Sonar[inTraining, ]
testing <- Sonar[-inTraining, ]
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
fitControl
library(gbm)
install.packages("gbm")
library(gbm)
library(gbm)
gbmFit1 <- train(Class ~ ., data = training,
method = "gbm",
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
segmentationData
colnames(segmentationData)
install.packages("rJava")
install.packages("rpart")
install.packages("rattle")
install.packages("rpart.plot")
install.packages("RColorBrewer")
install.packages("party")
install.packages("partykit")
install.packages("caret")
install.packages("gbm")
install.packages("plyr")
install.packages("reshape2")
install.packages("stringr")
install.packages("ggplot2")
install.packages("rattle")
install.packages("RWeka")
install.packages("C50")
install.packages("rpart")
install.packages("party")
install.packages("RColorBrewer")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("plyr")
install.packages("stringr")
install.packages("rpart")
install.packages("party")
install.packages("stringr")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("RColorBrewer")
install.packages("plyr")
install.packages("stringr")
install.packages("ggplot2")
install.packages("plyr")
install.packages("RColorBrewer")
install.packages("reshape2")
install.packages("plyr")
install.packages("reshape2")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
?Kyphosis
??Kyphosis
library(rpart)
data(Kyphosis)
Kyphosis
data(kyphosis)
library(rpart)
??Kyphosis
data(kyphosis)
Kyphosis
library(rpart)
Kyphosis
kyphosis
kyphosis
Kyphosis
library(rpart)
Kyphosis
library(cvTools)
Kyphosis
library(rpart)
data(Kyphosis)
data(rpart::Kyphosis)
data(Kyphosis)
data(kyphosis)
fit <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
