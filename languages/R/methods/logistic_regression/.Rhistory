xmlToDataFrame(getNodeSet(doc, "//x/*[a]"))
xmlToDataFrame(getNodeSet(doc, "//x/*[(a)]"))
xmlToDataFrame(getNodeSet(doc, "//x[(a)]"))
tt <-
'<x>
<a>text</a>
<b>bbb</b>
<c bar="me" />
<d>a phrase</d>
<e>
<e1>aa1</e1>
<e2>bb1</e2>
<e3>cc1</e3>
</e>
<e>
<e1>aa2</e1>
<e2>bb2</e2>
<e3>cc2</e3>
</e>
</x>'
doc <- xmlInternalTreeParse(tt)
xmlToDataFrame(getNodeSet(doc, "//x[(a)]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[self::e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[self::e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][self::e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][self::e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2][e3]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e[e1 or e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1]*[self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1][e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 and self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1][e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e")) # select all children of e node
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e[e1][e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e")) # select all children of e node
xmlToDataFrame(getNodeSet(doc, c("//x/e/")))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, c("//x/e")))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, c("//x/e/e1","//x/e/e2")))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/e1"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1 and e2"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1 and e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/[e1 | e2]"))  # select only e1 and e2
e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))  # select only e1 and e2
xmlToDataFrame(getNodeSet(doc, "//x/e")) # select all children of e node
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1 or self::e2]"))  # select e1 and e2 vertically
xmlToDataFrame(getNodeSet(doc, "//x/e/*[self::e1][self::e2]"))  # select only e1 and e2
xml.parsed = xmlInternalTreeParse(xml)
xmlToDataFrame(getNodeSet(xml.parsed, "/a/b/*[self::c or self::d or self::e]"))
source.url <- "http://www.kma.go.kr/weather/forecast/mid-term-rss3.jsp?stnId=108"
xml.text = getURIAsynchronous(source.url)
xml.parsed = xmlInternalTreeParse(xml.text)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
myframe
head(myframe)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city"), homogeneous=T)
head(myframe)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
myframe = xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
head(myframe)
getNodeSet(xml.parsed, "//body/location/city")
myframe
xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T)
xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/data"), homogeneous=T)
xmlToDataFrame(getNodeSet(xml.parsed, "//body/location | //body/location/data"), homogeneous=T)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location | //body/location/data"), homogeneous=T))
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location | //body/location/data"), homogeneous=T), n=1)
?head
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city | //body/location/data"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city | //body/location/data"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city | //body/location/province"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province | //body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province & //body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province  //body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/province"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/city"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/[(city) or (province)]"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location/*"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location")), n=1)
head(xmlToDataFrame(getNodeSet(xml.parsed, "//body/location"), homogeneous=T), n=1)
?xmlToDataFrame
library(xkcd)
install.packages("xkcd")
if (?library(xkcd)) {
install.packages("xkcd")
}
if (!require(xkcd)) {
install.packages("xkcd")
}
vignette("xkcd-intro")
library(ggplot2)
p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Fuel Efficiency of 32 Cars") +
xlab("Weight (x1000 lb)") + ylab("Miles per Gallon") +
theme(text=element_text(size=16, family="xkcd"))
ggsave("xkcd_ggplot.pdf", plot=p,  width=4, height=4)
## needed for Windows:
##   Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
embed_fonts("xkcd_ggplot.pdf")
embed_fonts("xkcd_ggplot.pdf")
ggsave("xkcd_ggplot.pdf", plot=p,  width=4, height=4)
library(ggplot2)
p <- ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() +
ggtitle("Fuel Efficiency of 32 Cars") +
xlab("Weight (x1000 lb)") + ylab("Miles per Gallon") +
theme(text=element_text(size=16, family="xkcd"))
ggsave("xkcd_ggplot.pdf", plot=p,  width=4, height=4)
## needed for Windows:
##   Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
embed_fonts("xkcd_ggplot.pdf")
set.seed(20121108)
x = seq(1, 10, 0.1)
r = function() runif(length(x), -0.05, 0.05)
y1 = sin(x) + r()
y2 = cos(x) + r()
# draw the lines and texts
par(mar = c(2, 0.1, 0.1, 0.1))
plot.new()
plot.window(range(x), c(-1.5, 1))
grid()
matplot(x, cbind(y1, y2, y2), type = "l", lty = 1, col = c("black",
"white", "red"), lwd = c(3, 15, 3), add = TRUE)
axis(1, c(2, 5, 6, 9), c("YARD", "STEPS", "DOOR", "INSIDE"), lwd = 0,
line = -1)
text(7, -1.25, "A SIN AND COS CURVE", cex = 1.5)
lines(x, -1.5 + runif(length(x), -0.005, 0.005), xpd = NA, lwd = 2)
plot(iris)
data.source <- "http://sealevel.colorado.edu/files/2014_rel1/sl_ns_global.txt"
getURL
getUrl
getURL
library(RCulr)
library(RCurl)
getURL()
data.source.url <- "http://sealevel.colorado.edu/files/2014_rel1/sl_ns_global.txt"
getURL(data.source.url)
data.source.raw <- getURL(data.source.url)
read.csv(data.source.raw, sep="\t")
read.csv(data.source.raw, sep="\t", header=T)
data.source <- read.csv(data.source.raw, sep="\t", header=T)
data.source <- read.csv(data.source.url, sep="\t", header=T)
data.source
colnames(data.source)
data.source.url <- "http://sealevel.colorado.edu/files/2014_rel1/sl_ns_global.txt"
data.source <- read.csv(data.source.url, sep="\t", header=T)
data.source
NCOL(data.source)
data.source <- read.table(data.source.url, sep="\t", header=T)
data.source
NCOL(data.source)
data.source <- read.table(data.source.url, header=T)
NCOL(data.source)
data.source
NCOL(data.source)
colnames(data.source)
as.Date(data.source$year)
data.source$year
data.source <- read.table(data.source.url, header=T, colClasses=c("characters", "characters"))
data.source <- read.table(data.source.url, header=T, colClasses=c("character", "character"))
NCOL(data.source)
colnames(data.source)
as.Date(data.source$year)
data.source$year
as.POSIXct(data.source$year)
as.POSIXct(data.source$year)
data.source$year
138 * 0.5
9813 * 0.6
9813 * 0.5
24*24*365
24*365
24*365*6
24*365
48*365
24*365
24*366
24*365
24*24*365
60*24*24*365
60*24*24*365 / 9999
60*24*24*365 / 1200
60*24*24*365 / 1500
365 / 10000
9450 * 0.0365
install.packages("konlp")
install.packages("KoNLP")
library(KoNLP)
tau
??tau
?tau
????tau
????
t
????a
?a
??a
???a
????a
????CLIPS
????linear
????please
????please
abs?
;
abs????
?a?
;
?a?
;
????a
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
car_mpg = read.table(file="car_mpg_crawl.tsv", header=F, sep="\t")
library(Rserve)
install.packages("Rserve")
library(Rserve)
c = RSconnect(host = "localhost", port 6311)
c = RSconnect(host = "192.168.5.181", port = 9797)
c = RSconnect(host = "192.168.5.181", port = 9797)
library(Rserve)
c = RSconnect(host = "192.168.5.181", port = 9797)
library(Rserve)
apropos("RSc")
apropos("^RSc")
apropos("^RS")
install.package("Rclient")
install.package("RSclient")
install.packages("RSclient")
library(RSclient)
c = RS.connect(host = "192.168.5.181", port = 9797)
RS.connect
c = RS.connect(host = "192.168.5.181", port = 9797)
rsc = RS.connect(host = "192.168.5.181", port = 9797)
rsc = RS.connect(host="192.168.5.181", port=9791)
rsc = RS.connect(host="192.168.5.181", port=9797)
rsc = RS.connect(host="192.168.5.181", port=9797)
RS.login(rsc, "root", "dss1234~!")
rsc = RS.connect(host="192.168.5.181", port=9797)
rsc = RS.connect()
rsc = RS.connect(host="192.168.5.181", port="9797")
rsc = RS.connect(host="192.168.5.181", port=9797, tls=T)
rsc = RS.connect(host="192.168.5.181", port=9797, tls=F)
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
rsc = RS.connect(host="192.168.5.181")
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F, user="root", password="dss1234~!")
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
rsc = RS.connect(host="192.168.5.181", port=6311, tls=F)
install.packages("Rook")
install.packages("party")
library("party")
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris)
print(iris_ctree)
plot(iris_ctree, type="simple")
install.packages("rattle")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
install.packages("party")
library(rpart)
data(Kyphosis)
Kyphosis
kyphosis
# ?ctree
?ctree
??ctree
library(partykit)
ctree
kyphosis
krphosis[71:81,]
kyphosis[71:81,]
kyphosis[1:71,]
kyphosis[71:81,]
train.dasta <- kyphosis[1:71,]
test.data <- kyphosis[72:81,]
model_ctree <- ctree(Kyphosis ~ . , data = train.data)
train.data <- kyphosis[1:71,]
model_ctree <- ctree(Kyphosis ~ . , data = train.data)
pred <- predict(model_ctree, newdata=test.data)
library(caret)
confusionMatrix(pred, test$Kyphosis)
library(caret)
install.packages("caret")
library(caret)
confusionMatrix(pred, test$Kyphosis)
confusionMatrix(pred, test.data$Kyphosis)
probs <- treeresponse(model_ctree, newdata=test.data)
treeresponse
?treeresponse
??treeresponse
library(party)
install.packages("party")
library(party)
probs <- treeresponse(model_ctree, newdata=test.data)
library(partykit)
probs <- treeresponse(model_ctree, newdata=test.data)
treeresponse
treeresponse(model_ctree, newdata=test.data)
library(caret)
confusionMatrix(pred, test.data$Kyphosis)
probs <- treeresponse(model_ctree, newdata=test.data)
pred <- do.call(rbind, pred)
install.packages("ROCR")
library(ROCR)
library(ROCR)
roc_pred <- prediction(pred[,1], test$response)
roc_pred <- prediction(pred[,1], test.data$Kyphosis)
test.data$Kyphosis
pred[,1]
treeresponse
treeresponse(model_ctree, newdata=test.data)
?treeresponse
model_ctree <- ctree(Kyphosis ~ . , data = train.data)
pred <- predict(model_ctree, newdata=test.data)
confusionMatrix(pred, test.data$Kyphosis)
probs <- treeresponse(model_ctree, newdata=test.data)
pred <- do.call(rbind, pred)
pred
pred <- do.call(rbind, probs)
summary(pred)
library(ROCR)
roc_pred <- prediction(pred[,1], test.data$Kyphosis)
plot(performance(roc_pred, measure="tpr", x.measure="fpr"), colorize=TRUE)
plot(performance(roc_pred, measure="lift", x.measure="rpp"), colorize=TRUE)
plot(performance(roc_pred, measure="sens", x.measure="spec"), colorize=TRUE)
plot(performance(roc_pred, measure="prec", x.measure="rec"), colorize=TRUE)
?ctree
??ctree
?tree
??tree
tree
library(tree)
library(tree)
tree
?tree
data(cpus, package="MASS")
cpus.ltr <- tree(log10(perf) ~ syct+mmin+mmax+cach+chmin+chmax, cpus)
cpus.ltr
summary(cpus.ltr)
plot(cpus.ltr)
text(cpus.ltr)
ir.tr <- tree(Species ~., iris)
ir.tr
summary(ir.tr)
cpus
log10(perf)
perf
cpus$perf
cpus.ltr <- tree(perf ~ syct+mmin+mmax+cach+chmin+chmax, cpus)
cpus.ltr
cpus.ltr
summary(cpus.ltr)
text(cpus.ltr)
ir.tr <- tree(Species ~., iris)
ir.tr
summary(ir.tr)
?tree
tr = tree(frmla, data=raw)
raw
ir.tr <- tree(Species ~., iris)
ir.tr
summary(ir.tr)
cpus
?cpus
??cpus
head(cpus)
dim(cpus)
cpus$perf
summary(cpus.ltr)
plot(cpus.ltr)
text(cpus.ltr)
summary(cpus.ltr)
ir.tr <- tree(Species ~., iris)
ir.tr
summary(ir.tr)
library(caret)
209/10
cpus.train <- cpus[1:189,]
cpus.train
cpus.test - cpus[1:190,209]
pred <- tree(perf ~ syct+mmin+mmax+cach+chmin+chmax, cpus)
confusionMatrix(pred, cpus.test$perf)
confusionMatrix(pred, cpus.test$perf)
pred <- tree(perf ~ syct+mmin+mmax+cach+chmin+chmax, cpus)
confusionMatrix(pred, cpus.test$perf)
pred <- tree(perf ~ syct+mmin+mmax+cach+chmin+chmax, cpus.train)
confusionMatrix(pred, cpus.test$perf)
?confusionMatrix
lvs <- c("normal", "abnormal")
truth <- factor(rep(lvs, times = c(86, 258)),
levels = rev(lvs))
pred <- factor(
c(
rep(lvs, times = c(54, 32)),
rep(lvs, times = c(27, 231))),
levels = rev(lvs))
xtab <- table(pred, truth)
confusionMatrix(xtab)
confusionMatrix(pred, truth)
confusionMatrix(xtab, prevalence = 0.25)
truth
lvs <- c("normal", "abnormal")
truth <- factor(rep(lvs, times = c(86, 258)),
levels = rev(lvs))
pred <- factor(
c(
rep(lvs, times = c(54, 32)),
rep(lvs, times = c(27, 231))),
levels = rev(lvs))
pred
xtab <- table(pred, truth)
xtab
confusionMatrix(xtab)
confusionMatrix(pred, truth)
confusionMatrix(xtab, prevalence = 0.25)
plot(ir.tr)
text(ir.tr)
fancyRpartPlot(ir.tr)
library(rpart)
fancyRpartPlot(ir.tr)
library(rparty)
library(rpartkit)
library(party)
fancyRpartPlot(ir.tr)
??fancyRpartPlot
library(rattle)
fancyRpartPlot(ir.tr)
??fancyRpartPlot
lvs <- c("normal", "abnormal")
truth <- factor(rep(lvs, times = c(86, 258)),
levels = rev(lvs))
summary(ir.tr)
pred
?tree
cv.tree(ir.tr,, prune.tree)
ir.tr.pruned <- cv.tree(ir.tr,, prune.tree)
ir.tr.pruned
summary(ir.tr.pruned)
cv.tree(ir.tr,, prune.tree)
ir.tr.cv <- cv.tree(ir.tr,, prune.tree)
ir.tr.cv <- cv.tree(ir.tr,, prune.tree)
ir.tr.cv
for(i in 2:5) fgl.cv$dev <- fgl.cv$dev + cv.tree(fgl.tr,, prune.tree)$dev
for(i in 2:5) ir.tr.cv$dev <- ir.tr.cv$dev + cv.tree(ir.tr,, prune.tree)$dev
ir.tr.cv$dev
fgl.cv$dev <- fgl.cv$dev/5
ir.tr.cv$dev <- ir.tr.cv$dev/5
ir.tr.cv$dev
plot(fgl.cv)
plot(ir.tr.cv)
ls
ls )()
ls()
setwd("~/workspace/code_snippets/R/logistic_regression")
?ROC
install.packages("ROc")
install.packages("ROC")
?ROC
install.packages("Epi")
library(Epi)
rc <- ROC( form = y ~ x + z, plot="sp" )
rc <- ROC(form = mower.data$owner ~ ., plot="sp" )
?ROC
plot(g)
library("pROC")
mower.data.result <- mower.data
mower.data.result$pred <- mower.predict
g <- roc(owner ~ pred, data = mower.data.result)
plot(g)
library(xlsx)
install.packages("xlsx")
library(xlsx)
drug.data <- read.xlsx("./drug.xlsx", 1)
drug.data <- read.xlsx("./drug.xlsx", 1)
install.packages('rJava')
library(xlsx)
install.packages("xlsx")
library(xlsx)
